<?php

namespace PN\DynamicFormBundle\Repository;

use PN\ServiceBundle\Utils\Validate;
use PN\ServiceBundle\Utils\SQL;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends \Doctrine\ORM\EntityRepository {

    private $nameAttributeId = 1;

    public function findWithName($id) {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT a.id, asa.value name FROM `application` a "
                . "LEFT JOIN career c ON c.id=a.career_id "
                . "LEFT JOIN application_has_section_attribute asa ON asa.application_id= a.id AND asa.section_attribute_id=$this->nameAttributeId "
                . "WHERE a.id = :id LIMIT 1";

        $statement = $connection->prepare($sql);
        $statement->bindValue("id", $id);
        $statement->execute();
        $filterResult = $statement->fetch();
        if ($filterResult == null) {
            return null;
        }
        $object = $this->find($filterResult['id']);
        $object->name = $filterResult['name'];
        return $object;
    }

    public function filter($search, $count = FALSE, $startLimit = NULL, $endLimit = NULL) {

        $sortSQL = [
            'a.id',
            'c.job_title',
            'asa.value',
            'a.created',
        ];
        $connection = $this->getEntityManager()->getConnection();
        $where = FALSE;
        $clause = '';

        $searchFiltered = new \stdClass();
        foreach ($search as $key => $value) {
            if (Validate::not_null($value) AND ! is_array($value)) {
                $searchFiltered->{$key} = substr($connection->quote($value), 1, -1);
            } else {
                $searchFiltered->{$key} = $value;
            }
        }
        if (isset($searchFiltered->deleted) AND in_array($searchFiltered->deleted, array(0, 1))) {
            $where = ($where) ? " AND " : " WHERE ";
            if ($searchFiltered->deleted == 1) {
                $clause .= $where . " a.deleted IS NOT NULL ";
            } else {
                $clause .= $where . " a.deleted IS NULL ";
            }
        }


        if (isset($searchFiltered->string) AND $searchFiltered->string) {

            if (SQL::validateSS($searchFiltered->string)) {
                $where = ($where) ? ' AND ( ' : ' WHERE ( ';
                $clause .= SQL::searchSCG($searchFiltered->string, 'a.id', $where);
                $clause .= SQL::searchSCG($searchFiltered->string, 'asa.value', ' OR ');
                $clause .= SQL::searchSCG($searchFiltered->string, 'c.job_title', ' OR ');
                $clause .= " ) ";
            }
        }

        if ($count) {
            $sql = "SELECT count(a.id) as `count` FROM `application` a "
                    . "LEFT JOIN career c ON c.id=a.career_id "
                    . "LEFT JOIN application_has_section_attribute asa ON asa.application_id= a.id AND asa.section_attribute_id=$this->nameAttributeId ";
            $sql .= $clause;
            $statement = $connection->prepare($sql);
            $statement->execute();
            return $queryResult = $statement->fetchColumn();
        }

        $sql = "SELECT a.id, asa.value name FROM `application` a "
                . "LEFT JOIN career c ON c.id=a.career_id "
                . "LEFT JOIN application_has_section_attribute asa ON asa.application_id= a.id AND asa.section_attribute_id=$this->nameAttributeId ";
        $sql .= $clause;

        if (isset($searchFiltered->ordr) AND Validate::not_null($searchFiltered->ordr)) {
            $dir = $searchFiltered->ordr['dir'];
            $columnNumber = $searchFiltered->ordr['column'];
            if (isset($columnNumber) AND array_key_exists($columnNumber, $sortSQL)) {
                $sql .= " ORDER BY " . $sortSQL[$columnNumber] . " $dir";
            }
        } else {
            $sql .= ' ORDER BY a.id DESC';
        }


        if ($startLimit !== NULL AND $endLimit !== NULL) {
            $sql .= " LIMIT " . $startLimit . ", " . $endLimit;
        }

        $statement = $connection->prepare($sql);
        $statement->execute();
        $filterResult = $statement->fetchAll();
        $result = array();

        foreach ($filterResult as $key => $r) {
            $object = $this->find($r['id']);
            $object->name = $r['name'];
            $result[] = $object;
        }
//-----------------------------------------------------------------------------------------------------------------------
        return $result;
    }

}
